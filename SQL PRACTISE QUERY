5) Weather Observation Station 5 =>
Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, 
choose the one that comes first when ordered alphabetically.
The STATION table is described as follows:

SELECT CITY,LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY), CITY LIMIT 1;

SELECT CITY,LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) DESC, CITY LIMIT 1;
===============================================================================================================================================================================================================
6) Weather Observation Station 6
Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

select city from station where SUBSTRING(city,1,1) in ("a","e","i","o","u");

===============================================================================================================================================================================================================
7) Weather Observation Station 7
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:
select distinct(city) from station where substring(city,-1,1) in ("a","e","i","o","u");
===============================================================================================================================================================================================================

8) Weather Observation Station 8
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

select distinct(city) from station where substring(city,-1,1) in ("a","e","i","o","u") and substring(city,1,1)
in ("a","e","i","o","u") ;

===============================================================================================================================================================================================================
9) Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

select distinct(city) from station where substring(city,1,1) not in ("a","e","i","o","u");
===============================================================================================================================================================================================================
10) Weather Observation Station 10
Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:
select distinct(city) from station where substring(city,-1,1) not in ("a","e","i","o","u");

===============================================================================================================================================================================================================

11) Weather Observation Station 11
Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:
select distinct(city) from station where substring(city,-1,1) not in ("a","e","i","o","u") or substring(city,1,1)
not in ("a","e","i","o","u") ;
===============================================================================================================================================================================================================

12) Weather Observation Station 12

Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

select distinct(city) from station where substring(city,-1,1) not in ("a","e","i","o","u") and substring(city,1,1)
not in ("a","e","i","o","u") ;
===============================================================================================================================================================================================================

13) Query the Name of any student in STUDENTS who scored higher than  75 Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

Input Format

The STUDENTS table is described as follows:
select name from students where marks>75 order by right(name,3) ,id asc;

===============================================================================================================================================================================================================
14) Employee Names

Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

Input Format

The Employee table containing employee data for a company is described as follows:
select name from employee order by name;

===============================================================================================================================================================================================================
15) Employee Salaries
Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  2000 per month who have been employees for less than  10months. 
Sort your result by ascending employee_id.

Input Format

The Employee table containing employee data for a company is described as follows:
select name from employee where salary >2000 and months<10 order by employee_id;

===============================================================================================================================================================================================================
16) Type of Triangle

Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
Input Format

The TRIANGLES table is described as follows:


select 
case
when (b+c)<=a or (a+c)<=b or (a+b)<=c then "Not A Triangle"
when a=b and b=c then  "Equilateral"
when a=b or b=c or a=c then "Isosceles"

when a!=b!=c then "Scalene"

end 
from triangles;
===============================================================================================================================================================================================================
17) Population Census

Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

Input Format

The CITY and COUNTRY tables are described as follows:


select sum(city.population) from city
inner join country
on city.countrycode = country.code
group by country.continent
having country.CONTINENT='Asia';

select sum(city.population) from city
inner join country
on city.countrycode = country.code
where country.CONTINENT='Asia';

===============================================================================================================================================================================================================
18) African Cities

Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

Input Format

The CITY and COUNTRY tables are described as follows:

select city.name from city
inner join country 
on city.countrycode= country.code
where continent='africa';

===============================================================================================================================================================================================================
19) Average Population of Each Continent
Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

Input Format

The CITY and COUNTRY tables are described as follows:

select continent,floor(avg(city.population)) from city
inner join country
on city.countrycode = country.code
group by continent;


===============================================================================================================================================================================================================
20) Revising the Select Query II


Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

The CITY table is described as follows:

select name from city where population>120000 and countrycode="usa";

===============================================================================================================================================================================================================

21) Revising Aggregations - The Count Function


Query a count of the number of cities in CITY having a Population larger than 100000
select count(name) from city where population>100000;

===============================================================================================================================================================================================================

22) Revising Aggregations - The Sum Function
    Query the total population of all cities in CITY where District is California.

    select sum(population) from city where district= "California";

===============================================================================================================================================================================================================

23) Revising Aggregations - Averages
    Query the average population of all cities in CITY where District is California.
    select avg(population) from city where district="california";  

===============================================================================================================================================================================================================
24) Average Population
    Query the average population for all cities in CITY, rounded down to the nearest integer.
    select floor(avg(population)) from city;

===============================================================================================================================================================================================================

25) Japan Population
    Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.
    select sum(population) from city where countrycode="jpn";

===============================================================================================================================================================================================================
26) Population Density Difference
    Query the difference between the maximum and minimum populations in CITY.
    select max(population) - min(population) from city;

===============================================================================================================================================================================================================
27) Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  key was broken until after completing the calculation. She 
wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.

Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.
select round(avg(salary)) - round(avg(replace(salary,0,""))) 
from employees;

===============================================================================================================================================================================================================
28) Top Earners
   We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to 
  find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers.

Input Format

The Employee table containing employee data for a company is described as follows:

  select max(salary * months),count(salary * months) from employee
  group by (salary * months)
  order by (salary * months) desc
  limit 1;
 or===>

 select max(salary * months),count(*) from employee
 where (salary * months) = (select max(salary * months) as m from employee)  ;

===============================================================================================================================================================================================================
29) Weather Observation Station 2
    Query the following two values from the STATION table:

  The sum of all values in LAT_N rounded to a scale of  decimal places.
  The sum of all values in LONG_W rounded to a scale of  decimal places.
  Input Format

  The STATION table is described as follows:

  select round(sum(lat_n),2), round(sum(long_w),2) from station;

===============================================================================================================================================================================================================

30) Weather Observation Station 13
    Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than  38.7880 and less than 137.2345. Truncate your answer to 4 decimal places.

    Input Format

    The STATION table is described as follows:
    select round(sum(lat_n),4) from station 
    where lat_n > 38.7880 and lat_n < 137.2345;

===============================================================================================================================================================================================================

31) Weather Observation Station 14

   Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer to  4 decimal places.

   Input Format
   The STATION table is described as follows:
   select round(max(lat_n),4) from station 
    where lat_n < 137.2345;

===============================================================================================================================================================================================================

32) The Report
    ou are given two tables: Students and Grades. Students contains three columns ID, Name and Marks.
    Grades contains the following data:
    Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade -- i.e. 
    higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their 
    name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

    Write a query to help Eve.
    


select 
case 
when marks < 70 then null else name end , 


case 
when marks between 90 and 100 then 10 
when marks between 80 and 89 then 9 
when marks between 70 and 79 then 8 
when marks between 60 and 69 then 7 
when marks between 50 and 59 then 6 
when marks between 40 and 49 then 5 
when marks between 30 and 39 then 4 
when marks between 20 and 29 then 3
when marks between 10 and 19 then 2 
when marks between 0 and 9 then 1 end as grade , 

marks from students order by grade desc, name

===============================================================================================================================================================================================================

33) 
